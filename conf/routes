# Voting administration
+ jwtFilter
POST    /voting                                     controllers.voting.VotingController.create(request: Request)
+ jwtOptionalFilter
GET     /voting/:id                                 controllers.voting.VotingController.single(id: String, request: Request)

# Voting lists
GET    /votings/public                              controllers.voting.VotingsPagingController.publicVotings(request: Request)
+ jwtFilter
GET    /votings/votecaller                          controllers.voting.VotingsPagingController.votingsOfVoteCaller(request: Request)
+ jwtFilter
GET    /votings/voter                               controllers.voting.VotingsPagingController.votingsOfVoter(request: Request)

# Cast vote
+ jwtFilter
POST    /castvote/init                              controllers.voting.CommissionController.init(request: Request)
+ jwtFilter
POST    /castvote/:votingId/signEnvelope            controllers.voting.CommissionController.signEnvelope(votingId: String, request: Request)
POST    /castvote/createTransaction                 controllers.voting.CommissionController.createTransaction(request: Request)
GET     /castvote/txOfSignature/:signature          controllers.voting.CommissionController.transactionOfSignature(signature: String)
+ jwtFilter
GET     /castvote/envlSignature/:votingId           controllers.voting.CommissionController.getEnvelopeSignature(votingId: String, request: Request)

# Other
GET     /encryptchoice/:votingId/:choice            controllers.voting.CommissionController.getAnEncryptedChoice(votingId: String, choice: String)

# Token auth
GET    /tokenauth/:token                            controllers.voting.TokenAuthController.auth(token: String)